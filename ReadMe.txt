 Проект представляет собой веб-приложение для управления интернет-магазином. Основные функции включают управление товарами, заказами, складами и клиентами. Приложение разработано с использованием Spring Boot и взаимодействует с базой данных PostgreSQL. Для управления изменениями в базе данных используется Liquibase, а для преобразования данных между сущностями и DTO — MapStruct. Также в проекте реализована пагинация для получения списка товаров и заказов. Реализовано логирование уровня INFO в ProductService

 Основные технологии
 Spring Boot: Основной фреймворк для разработки приложения.

 PostgreSQL: Реляционная база данных для хранения информации о товарах, заказах, складах и клиентах.

 Liquibase: Инструмент для управления изменениями в базе данных. Используется для создания таблиц и наполнения их начальными данными.

 MapStruct: Библиотека для автоматического преобразования сущностей в DTO и обратно.

 Пагинация: Реализована для получения списка товаров и заказов с поддержкой постраничного вывода.

 REST API: Приложение предоставляет RESTful API для взаимодействия с клиентской частью. Демонстрирует применение Get Post Putch и Delet запросов. Причем delet запросы используются с "мягким" удалением через отключение активности товара с помощью флага. При необходимости это позволяет вернуть товар в любой момент и схоранить всю статистику по нему.

Управление структурой базы данных осуществляется с помощью Liquibase.

Изменения разделены на два файла:

changelog-0001-init.sql: Создание таблиц (categories, products, orders и т.д.).
changelog-0003-add-is-deleted.sql Демонстрирует создание доп колонки в таблице product
master.xml отвечает за хронологию выполнения фалов Liquibase
changelog-0002-data.sql: Наполнение базы данных начальными данными (например, категории, товары, склады).

Пагинация:

Для получения списка товаров и заказов реализована пагинация. Это позволяет эффективно работать с большими объемами данных.

Пример запроса с пагинацией:

GET /api/products?page=0&size=10
Где:
page — номер страницы (начинается с 0).
size — количество элементов на странице.


Как запустить проект
Требования:

Установленная Java 17 или выше.

Установленная PostgreSQL.

Maven для сборки проекта.

Настройка базы данных:

Создайте базу данных shop в PostgreSQL.

Настройте подключение к базе данных в файле application.properties:

spring.datasource.url=jdbc:postgresql://localhost:5432/shop
spring.datasource.username=postgres
spring.datasource.password= ваш пароль к базе данных
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

Запуск приложения:

Соберите проект с помощью Maven:

mvn clean install

Запустите приложение:

mvn spring-boot:run

Для удобства тестирования и взаимодействия с API в проекте интегрирован Swagger (реализация OpenAPI 3.0) через библиотеку springdoc-openapi. Это позволяет автоматически генерировать интерактивную документацию для всех endpoints.

Доступ к Swagger UI:
После запуска приложения документация доступна по адресу:
http://localhost:8080/swagger-ui/index.html


 Описание сервисов интернет-магазина


1. ProductService
Отвечает за управление товарами в системе.
- Получает список всех товаров из базы данных.
- Позволяет найти товар по его ID.
- Преобразует данные сущности `ProductEntity` в `ProductResponseDto` с помощью маппера `ProductResponseMapper`.

2. CategoryService
Отвечает за работу с категориями товаров.
- Получает все категории товаров.
- Позволяет получить категорию по ID.
- Преобразует данные сущности `CategoryEntity` в `CategoryResponseDto`.

 3. CustomerService
Управляет клиентами интернет-магазина.
- Получает список всех клиентов.
- Позволяет получить информацию о конкретном клиенте по ID.
- Преобразует данные сущности `CustomerEntity` в `CustomerResponseDto`.

 4. OrderService
Отвечает за управление заказами.
- Получает список всех заказов.
- Позволяет получить заказ по ID.
- Преобразует данные сущности `OrderEntity` в `OrderResponseDto`.

 5. OrderItemService
Работает с элементами заказа (отдельными товарами в заказе).
- Получает список всех позиций в заказах.
- Позволяет получить отдельную позицию заказа по ID.
- Преобразует `OrderItemEntity` в `OrderItemResponseDto`.

 6. WarehouseService
Отвечает за управление складами.
- Получает список всех складов.
- Позволяет найти склад по ID.
- Преобразует `WarehouseEntity` в `WarehouseResponseDto`.

 7. RestockService
Отвечает за пополнение запасов на складе.
- Получает список всех пополнений товаров.
- Позволяет получить пополнение по ID.
- Преобразует `RestockEntity` в `RestockResponseDto`.

 8. StockItemService
Управляет товарными остатками на складе.
- Получает список всех позиций товаров на складе.
- Позволяет получить информацию о конкретной позиции по ID.
- Преобразует `StockItemEntity` в `StockItemResponseDto`.

